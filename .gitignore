# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcshareddata dir with a WorkspaceSettings.xcsettings file which we don't want to ignore
# .swiftpm/xcode
.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

## Xcode Patch
*.xcodeproj/*
!*.xcodeproj/project.pbxproj
!*.xcodeproj/xcshareddata/
!*.xcodeproj/project.xcworkspace/
*.xcodeproj/project.xcworkspace/*
!*.xcodeproj/project.xcworkspace/contents.xcworkspacedata
!*.xcodeproj/project.xcworkspace/xcshareddata/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# SwiftUI Previews
**/PreviewContent/

# Development certificates and provisioning profiles  
*.p12
*.mobileprovision
*.provisionprofile

# App Store Connect API Key
AuthKey_*.p8

# Firebase
GoogleService-Info.plist
GoogleService-Info-*.plist

# Environment files
.env
.env.local
.env.production
.env.staging

# IDE files
.vscode/
.idea/

# Backup files
*.bak
*.backup
*.orig
*.tmp

# Log files
*.log

# Archive files
*.zip
*.tar.gz
*.rar

# Node.js (if using any Node-based tools)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Ruby (if using Fastlane, CocoaPods)
.bundle/
vendor/bundle/
.ruby-version

# Python (if using any Python tools)
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/

# Rust (for cdk-swift dependency builds)
target/
Cargo.lock

# Just build artifacts
.just/

# Temporary files
*.swp
*.swo
*~

# Testing
coverage/
*.gcda
*.gcno
*.profdata

# Documentation generation
docs/

# Custom app-specific ignores (add your own below)
# Example: 
# config/secrets.plist
# private-keys/